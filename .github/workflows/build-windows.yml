name: Build DeputyDev Windows Binary

on:
  release:
    types: [published, prereleased]

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: get_version
        shell: bash
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Write deploy key
        shell: bash
        run: |
          echo "${{ secrets.DEPUTYDEV_CORE_ACCESS_KEY }}" > /tmp/deputydev_core_deploy
          chmod 600 /tmp/deputydev_core_deploy

      - name: Add github.com to known_hosts
        shell: bash
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Build virtualenv and install deps
        shell: bash
        env:
          GIT_SSH_COMMAND: "ssh -i /tmp/deputydev_core_deploy -o IdentitiesOnly=yes"
        run: |
          python -m pip install --upgrade pip
          pip install uv

          uv venv .venv
          source .venv/Scripts/activate
          uv sync --extra binarization

      - name: Install ccache
        run: choco install -y ccache

      - name: Build Windows EXE
        shell: bash
        env:
          GIT_SSH_COMMAND: "ssh -i /tmp/deputydev_core_deploy -o IdentitiesOnly=yes"
          NUITKA_CCACHE_AUTO_INSTALL: "yes"
        run: |
          set -e
          source .venv/Scripts/activate

          VERSION="${{ steps.get_version.outputs.version }}"
          DIR="windows-x64-${VERSION}"
          mkdir -p $DIR

          python -m nuitka --mode=app --show-modules --jobs=2 --show-scons	--show-progress	 \
            --include-package=tree_sitter_language_pack.bindings.dockerfile \
            --include-package=tree_sitter_language_pack.bindings.make \
            --include-package=tree_sitter_language_pack.bindings.cmake \
            --include-package=tree_sitter_language_pack.bindings.python \
            --include-package=tree_sitter_language_pack.bindings.javascript \
            --include-package=tree_sitter_language_pack.bindings.typescript \
            --include-package=tree_sitter_language_pack.bindings.java \
            --include-package=tree_sitter_language_pack.bindings.c \
            --include-package=tree_sitter_language_pack.bindings.cpp \
            --include-package=tree_sitter_language_pack.bindings.go \
            --include-package=tree_sitter_language_pack.bindings.rust \
            --include-package=tree_sitter_language_pack.bindings.ruby \
            --include-package=tree_sitter_language_pack.bindings.html \
            --include-package=tree_sitter_language_pack.bindings.kotlin \
            --include-package=tree_sitter_language_pack.bindings.json \
            --include-package=tree_sitter_language_pack.bindings.tsx \
            app/service.py

          mv service.exe "$DIR/service.exe"

          CHECKSUM=$(openssl dgst -sha256 "$DIR/service.exe" | awk '{print $2}')
          echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
          echo "dir=$DIR" >> $GITHUB_OUTPUT

          tar -czf "$DIR.tar.gz" -C "$DIR" service.exe
        id: win_build

      - name: Upload Windows tarball
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.win_build.outputs.dir }}.tar.gz
          path: ${{ steps.win_build.outputs.dir }}.tar.gz

      - name: Create manifest
        run: |
          cat > binaries-manifest.json <<EOF
          {
            "win32": {
              "x64": {
                "directory": "${{ steps.win_build.outputs.dir }}",
                "file_checksum": "${{ steps.win_build.outputs.checksum }}",
                "file_path": "${{ steps.win_build.outputs.dir }}/service.exe",
                "s3_key": "binaries/${{ steps.get_version.outputs.version }}/windows/${{ steps.win_build.outputs.dir }}.tar.gz",
                "service_path": "${{ steps.win_build.outputs.dir }}/service.exe"
              }
            }
          }
          EOF

      - name: Upload Windows manifest
        uses: actions/upload-artifact@v4
        with:
          name: binaries-manifest-windows.json
          path: binaries-manifest.json
