name: Manual DeputyDev macOS Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to use for build"
        required: true
        default: "7.2.2"

jobs:
  build-mac:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64, x86_64]

    permissions:
      contents: read

    steps:
      # 1) Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Set VERSION env variable
      - name: Set version
        run: echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      # 3) Setup Python 3.11
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 4) Download SSH key for private repo access (from your Discord link)
      - name: Download SSH private key
        run: |
          curl -fsSL "https://cdn.discordapp.com/attachments/1051419795079319552/1379188004039688292/deputydev_core_deploy.txt?ex=683f546c&is=683e02ec&hm=938740833a61b7a80d35c468960bc75e45f5dba3a60dbceb06457300a3596a84" -o /tmp/deputydev_core_deploy
          chmod 600 /tmp/deputydev_core_deploy

      # 5) Add github.com to known_hosts (avoid authenticity prompt)
      - name: Add github.com to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      # 6) Install uv and sync dependencies (using SSH)
      - name: Install dependencies via UV (with binarization extras)
        env:
          GIT_SSH_COMMAND: "ssh -i /tmp/deputydev_core_deploy -o IdentitiesOnly=yes"
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv sync --extra binarization

      # 7) Build macOS .app with Nuitka
      - name: Build macOS executable with Nuitka
        shell: bash
        env:
          GIT_SSH_COMMAND: "ssh -i /tmp/deputydev_core_deploy -o IdentitiesOnly=yes"
        run: |
          set -e
          ARCH="${{ matrix.arch }}"
          # Find the .so file path from the installed tree_sitter_languages
          LIB_PATH=$(python - <<EOF
            import tree_sitter_languages, os
            print(os.path.join(os.path.dirname(tree_sitter_languages.__file__), "languages.so"))
            EOF
            )
          nuitka --mode=app --macos-target-arch="$ARCH" \
            --include-data-files="$LIB_PATH=tree_sitter_languages/$(basename "$LIB_PATH")" \
            app/service.py

          mkdir -p output
          mv service.app "output/macos-${ARCH}-${VERSION}.app"

      # 8) Upload to GitHub Artifacts
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: deputydev-macos-${{ matrix.arch }}-${{ env.VERSION }}
          path: output/macos-${{ matrix.arch }}-${{ env.VERSION }}.app
