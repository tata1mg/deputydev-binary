name: Build DeputyDev macOS x64 Binary

on:
  release:
    types: [published]

jobs:
  build-macos-x64:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: get_version
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Write deploy key
        run: |
          echo "${{ secrets.DEPUTYDEV_CORE_ACCESS_KEY }}" > /tmp/deputydev_core_deploy
          chmod 600 /tmp/deputydev_core_deploy

      - name: Add github.com to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Build virtualenv and install deps
        env:
          GIT_SSH_COMMAND: "ssh -i /tmp/deputydev_core_deploy -o IdentitiesOnly=yes"
        run: |
          python -m pip install --upgrade pip
          pip install uv

          uv venv .venv
          source .venv/bin/activate
          uv sync --extra binarization

      - name: Build macOS x64 binary
        env:
          GIT_SSH_COMMAND: "ssh -i /tmp/deputydev_core_deploy -o IdentitiesOnly=yes"
        run: |
          set -e
          source .venv/bin/activate

          VERSION="${{ steps.get_version.outputs.version }}"
          DIR="macos-x64-${VERSION}"
          mkdir -p $DIR

          python3 -m nuitka \
            --mode=app \
            --jobs=$(sysctl -n hw.ncpu) \
            --lto=no \
            --python-flag=static_hashes \
            --assume-yes-for-downloads \
            --nofollow-import-to=nuitka.plugins.standard \
            --macos-signed-app-name="com.tata1mg.ddbinary" \
            --include-package=tree_sitter_language_pack.bindings.dockerfile \
            --include-package=tree_sitter_language_pack.bindings.make \
            --include-package=tree_sitter_language_pack.bindings.cmake \
            --include-package=tree_sitter_language_pack.bindings.python \
            --include-package=tree_sitter_language_pack.bindings.javascript \
            --include-package=tree_sitter_language_pack.bindings.typescript \
            --include-package=tree_sitter_language_pack.bindings.java \
            --include-package=tree_sitter_language_pack.bindings.c \
            --include-package=tree_sitter_language_pack.bindings.cpp \
            --include-package=tree_sitter_language_pack.bindings.go \
            --include-package=tree_sitter_language_pack.bindings.rust \
            --include-package=tree_sitter_language_pack.bindings.ruby \
            --include-package=tree_sitter_language_pack.bindings.html \
            --include-package=tree_sitter_language_pack.bindings.kotlin \
            --include-package=tree_sitter_language_pack.bindings.json \
            --include-package=tree_sitter_language_pack.bindings.tsx \
            --include-data-file=ripgrep/rg_darwin_x64=bin/rg \
            app/service.py

          mv service.app "$DIR/service.app"
          echo "dir=$DIR" >> $GITHUB_OUTPUT

          tar -czf "$DIR.tar.gz" -C "$DIR" service.app
        id: macos_build

      - name: Upload macOS tarball
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.macos_build.outputs.dir }}.tar.gz
          path: ${{ steps.macos_build.outputs.dir }}.tar.gz

      - name: Create manifest
        run: |
          cat > binaries-manifest.json <<EOF
          {
            "macos": {
              "x64": {
                "directory": "${{ steps.macos_build.outputs.dir }}",
                "file_path": "${{ steps.macos_build.outputs.dir }}/service.app/Contents/MacOS/service",
                "s3_key": "binaries/${{ steps.get_version.outputs.version }}/macos/${{ steps.macos_build.outputs.dir }}.tar.gz",
                "service_path": "${{ steps.macos_build.outputs.dir }}/service.app/Contents/MacOS/service"
              }
            }
          }
          EOF

      - name: Upload macOS manifest
        uses: actions/upload-artifact@v4
        with:
          name: binaries-manifest-macos-x64.json
          path: binaries-manifest.json
