name: Build DeputyDev Windows Binary

on:
  release:
    types: [published, prereleased]

jobs:
  build-windows:
    runs-on: [self-hosted, windows]
    strategy:
      matrix:
        arch: [x86_64]

    permissions:
      contents: read

    steps:
      # 1 ▸ Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2 ▸ Extract version from the tag (strip leading “v”)
      - name: Determine version
        id: get_version
        shell: powershell
        run: |
          $version = "${{ github.event.release.tag_name }}"
          $version = $version -replace "^v", ""
          echo "version=$version" >> $env:GITHUB_OUTPUT

      # 3 ▸ Setup Python 3.11
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 4 ▸ Write the SSH deploy key from repo secret
      - name: Write deploy key
        shell: powershell
        run: |
          $keyPath = "$env:TEMP\deputydev_core_deploy"
          Set-Content -Path $keyPath -Value "${{ secrets.DEPUTYDEV_CORE_ACCESS_KEY }}" -NoNewline
          icacls $keyPath /inheritance:r /grant:r "$env:USERNAME:R"

      # 5 ▸ Trust github.com host key
      - name: Add github.com to known_hosts
        shell: powershell
        run: |
          $sshDir = "$env:USERPROFILE\.ssh"
          if (-not (Test-Path $sshDir)) {
            New-Item -Path $sshDir -ItemType Directory | Out-Null
          }
          ssh-keyscan github.com | Out-File -FilePath "$sshDir\known_hosts" -Append

      # 6 ▸ Build .venv and install deps with uv
      - name: Build virtualenv and install deps
        shell: powershell
        env:
          GIT_SSH_COMMAND: "ssh -i $env:TEMP/deputydev_core_deploy -o IdentitiesOnly=yes"
        run: |
          python -m pip install --upgrade pip
          pip install uv

          uv venv .venv

          & .venv\Scripts\Activate.ps1

          # install runtime & binarization extras (pulls Nuitka)
          uv sync --extra binarization

      # 7 ▸ Install ccache on Windows (optional)
      - name: Install ccache on Windows
        shell: powershell
        run: |
          if (Get-Command choco -ErrorAction SilentlyContinue) {
            choco install -y ccache
          } else {
            Write-Host "choco not found; skipping ccache install"
          }

      # 8 ▸ Build standalone executable with Nuitka (Windows)
      - name: Build Windows binary
        shell: powershell
        env:
          GIT_SSH_COMMAND: "ssh -i $env:TEMP/deputydev_core_deploy -o IdentitiesOnly=yes"
          NUITKA_CCACHE_AUTO_INSTALL: "yes"
        run: |
          & .venv\Scripts\Activate.ps1

          $VERSION = "${{ steps.get_version.outputs.version }}"
          $ARCH = "x86_64"

          python -m nuitka --mode=app --show-progress `
            --include-package=tree_sitter_language_pack.bindings.dockerfile `
            --include-package=tree_sitter_language_pack.bindings.make `
            --include-package=tree_sitter_language_pack.bindings.cmake `
            --include-package=tree_sitter_language_pack.bindings.python `
            --include-package=tree_sitter_language_pack.bindings.javascript `
            --include-package=tree_sitter_language_pack.bindings.typescript `
            --include-package=tree_sitter_language_pack.bindings.java `
            --include-package=tree_sitter_language_pack.bindings.c `
            --include-package=tree_sitter_language_pack.bindings.cpp `
            --include-package=tree_sitter_language_pack.bindings.go `
            --include-package=tree_sitter_language_pack.bindings.rust `
            --include-package=tree_sitter_language_pack.bindings.ruby `
            --include-package=tree_sitter_language_pack.bindings.html `
            --include-package=tree_sitter_language_pack.bindings.kotlin `
            --include-package=tree_sitter_language_pack.bindings.json `
            --include-package=tree_sitter_language_pack.bindings.tsx `
            app/service.py

          if (!(Test-Path "output")) { New-Item -Path "output" -ItemType Directory | Out-Null }
          Move-Item -Path "service.exe" -Destination "output/windows-$ARCH-$VERSION.exe"

      # 9 ▸ Upload the resulting artifact (Windows)
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: deputydev-windows-${{ matrix.arch }}-${{ steps.get_version.outputs.version }}
          path: output/windows-${{ matrix.arch }}-${{ steps.get_version.outputs.version }}.exe
