name: Build DeputyDev Linux Binary

on:
  release:
    types: [published, prereleased]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64]

    permissions:
      contents: read

    steps:
      # 1 ▸ Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2 ▸ Extract version from the tag (strip leading “v”)
      - name: Determine version
        id: get_version
        shell: bash
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      # 3 ▸ Install Python 3.11
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 4 ▸ Write the SSH deploy key from repo secret
      - name: Write deploy key
        shell: bash
        run: |
          echo "${{ secrets.DEPUTYDEV_CORE_ACCESS_KEY }}" > /tmp/deputydev_core_deploy
          chmod 600 /tmp/deputydev_core_deploy

      # 5 ▸ Trust github.com host key
      - name: Add github.com to known_hosts
        shell: bash
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      # 6 ▸ Build .venv and install deps with uv
      - name: Build virtualenv and install deps
        shell: bash
        env:
          GIT_SSH_COMMAND: "ssh -i /tmp/deputydev_core_deploy -o IdentitiesOnly=yes"
        run: |
          python -m pip install --upgrade pip
          pip install uv

          uv venv .venv

          source .venv/bin/activate

          # install runtime & binarization extras (pulls Nuitka)
          uv sync --extra binarization

      # 6.5 ▸ Pre-install ccache (Linux-specific)
      - name: Install ccache on Linux
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache

      # 7 ▸ Build standalone executable with Nuitka (Linux)
      - name: Build Linux binary
        shell: bash
        env:
          GIT_SSH_COMMAND: "ssh -i /tmp/deputydev_core_deploy -o IdentitiesOnly=yes"
          NUITKA_CCACHE_AUTO_INSTALL: "yes"
        run: |
          set -e
          source .venv/bin/activate

          VERSION="${{ steps.get_version.outputs.version }}"
          ARCH="x86_64"

          python -m nuitka --mode=app --show-progress \
            --include-package=tree_sitter_language_pack.bindings.dockerfile \
            --include-package=tree_sitter_language_pack.bindings.make \
            --include-package=tree_sitter_language_pack.bindings.cmake \
            --include-package=tree_sitter_language_pack.bindings.python \
            --include-package=tree_sitter_language_pack.bindings.javascript \
            --include-package=tree_sitter_language_pack.bindings.typescript \
            --include-package=tree_sitter_language_pack.bindings.java \
            --include-package=tree_sitter_language_pack.bindings.c \
            --include-package=tree_sitter_language_pack.bindings.cpp \
            --include-package=tree_sitter_language_pack.bindings.go \
            --include-package=tree_sitter_language_pack.bindings.rust \
            --include-package=tree_sitter_language_pack.bindings.ruby \
            --include-package=tree_sitter_language_pack.bindings.html \
            --include-package=tree_sitter_language_pack.bindings.kotlin \
            --include-package=tree_sitter_language_pack.bindings.json \
            --include-package=tree_sitter_language_pack.bindings.tsx \
            app/service.py

          mkdir -p output
          mv service.bin "output/linux-${ARCH}-${VERSION}.bin"

      # 8 ▸ Upload the resulting artifact (Linux)
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: deputydev-linux-${{ matrix.arch }}-${{ steps.get_version.outputs.version }}
          path: output/linux-${{ matrix.arch }}-${{ steps.get_version.outputs.version }}.bin
