name: Build DeputyDev Linux & Windows Binaries

on:
  release:
    types: [published, prereleased]

jobs:
  build-cross:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        arch: [x86_64]

    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: get_version
        shell: bash
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Write deploy key
        shell: bash
        run: |
          echo "${{ secrets.DEPUTYDEV_CORE_ACCESS_KEY }}" > /tmp/deputydev_core_deploy
          chmod 600 /tmp/deputydev_core_deploy

      - name: Add github.com to known_hosts
        shell: bash
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Build virtualenv and install deps
        shell: bash
        env:
          GIT_SSH_COMMAND: "ssh -i /tmp/deputydev_core_deploy -o IdentitiesOnly=yes"
        run: |
          python -m pip install --upgrade pip
          pip install uv

          uv venv .venv

          if [ "$RUNNER_OS" = "Windows" ]; then
            ACTIVATE=".venv/Scripts/activate"
          else
            ACTIVATE=".venv/bin/activate"
          fi
          source "$ACTIVATE"

          uv sync --extra binarization

      - name: Install ccache on Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache

      - name: Install ccache on Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install -y ccache

      # ========== BUILD LINUX BIN ==========
      - name: Build Linux binary
        if: runner.os == 'Linux'
        shell: bash
        env:
          GIT_SSH_COMMAND: "ssh -i /tmp/deputydev_core_deploy -o IdentitiesOnly=yes"
          NUITKA_CCACHE_AUTO_INSTALL: "yes"
        run: |
          set -e
          source .venv/bin/activate

          VERSION="${{ steps.get_version.outputs.version }}"
          ARCH="x86_64"
          DIR="linux-x64-${VERSION}"
          mkdir -p $DIR

          python -m nuitka --mode=app \
            --include-package=tree_sitter_language_pack.bindings.dockerfile \
            --include-package=tree_sitter_language_pack.bindings.make \
            --include-package=tree_sitter_language_pack.bindings.cmake \
            --include-package=tree_sitter_language_pack.bindings.python \
            --include-package=tree_sitter_language_pack.bindings.javascript \
            --include-package=tree_sitter_language_pack.bindings.typescript \
            --include-package=tree_sitter_language_pack.bindings.java \
            --include-package=tree_sitter_language_pack.bindings.c \
            --include-package=tree_sitter_language_pack.bindings.cpp \
            --include-package=tree_sitter_language_pack.bindings.go \
            --include-package=tree_sitter_language_pack.bindings.rust \
            --include-package=tree_sitter_language_pack.bindings.ruby \
            --include-package=tree_sitter_language_pack.bindings.html \
            --include-package=tree_sitter_language_pack.bindings.kotlin \
            --include-package=tree_sitter_language_pack.bindings.json \
            --include-package=tree_sitter_language_pack.bindings.tsx \
            app/service.py

          mv service.bin "$DIR/service.bin"

          # Calculate checksum
          CHECKSUM=$(sha256sum "$DIR/service.bin" | awk '{print $1}')
          echo "$CHECKSUM" > "$DIR/service.bin.sha256"

          # Tar
          tar -czf "$DIR.tar.gz" "$DIR"

          # Save info for JSON
          echo "LINUX_DIR=$DIR" >> $GITHUB_ENV
          echo "LINUX_FILE_CHECKSUM=$CHECKSUM" >> $GITHUB_ENV
          echo "LINUX_TAR=$DIR.tar.gz" >> $GITHUB_ENV

      # ========== BUILD WINDOWS EXE ==========
      - name: Build Windows EXE
        if: runner.os == 'Windows'
        shell: bash
        env:
          GIT_SSH_COMMAND: "ssh -i /tmp/deputydev_core_deploy -o IdentitiesOnly=yes"
          NUITKA_CCACHE_AUTO_INSTALL: "yes"
        run: |
          set -e
          source .venv/Scripts/activate

          VERSION="${{ steps.get_version.outputs.version }}"
          ARCH="x86_64"
          DIR="windows-x64-${VERSION}"
          mkdir -p $DIR

          python -m nuitka --mode=app \
            --include-package=tree_sitter_language_pack.bindings.dockerfile \
            --include-package=tree_sitter_language_pack.bindings.make \
            --include-package=tree_sitter_language_pack.bindings.cmake \
            --include-package=tree_sitter_language_pack.bindings.python \
            --include-package=tree_sitter_language_pack.bindings.javascript \
            --include-package=tree_sitter_language_pack.bindings.typescript \
            --include-package=tree_sitter_language_pack.bindings.java \
            --include-package=tree_sitter_language_pack.bindings.c \
            --include-package=tree_sitter_language_pack.bindings.cpp \
            --include-package=tree_sitter_language_pack.bindings.go \
            --include-package=tree_sitter_language_pack.bindings.rust \
            --include-package=tree_sitter_language_pack.bindings.ruby \
            --include-package=tree_sitter_language_pack.bindings.html \
            --include-package=tree_sitter_language_pack.bindings.kotlin \
            --include-package=tree_sitter_language_pack.bindings.json \
            --include-package=tree_sitter_language_pack.bindings.tsx \
            app/service.py

          mv service.exe "$DIR/service.exe"

          # Calculate checksum
          CHECKSUM=$(sha256sum "$DIR/service.exe" | awk '{print $1}')
          echo "$CHECKSUM" > "$DIR/service.exe.sha256"

          # Tar
          tar -czf "$DIR.tar.gz" "$DIR"

          # Save info for JSON
          echo "WINDOWS_DIR=$DIR" >> $GITHUB_ENV
          echo "WINDOWS_FILE_CHECKSUM=$CHECKSUM" >> $GITHUB_ENV
          echo "WINDOWS_TAR=$DIR.tar.gz" >> $GITHUB_ENV

      # ========== UPLOAD ARTIFACTS ==========
      - name: Upload Linux tarball
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LINUX_TAR }}
          path: ${{ env.LINUX_TAR }}

      - name: Upload Windows tarball
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WINDOWS_TAR }}
          path: ${{ env.WINDOWS_TAR }}

      # ========== GENERATE JSON MANIFEST (ONCE) ==========
      - name: Generate JSON Manifest
        if: ${{ always() && runner.os == 'Linux' }}
        shell: bash
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          linux_dir="linux-x64-${VERSION}"
          windows_dir="windows-x64-${VERSION}"

          linux_checksum=$(cat "${linux_dir}/service.bin.sha256")
          windows_checksum=$(cat "${windows_dir}/service.exe.sha256")

          cat > binaries-manifest.json <<EOF
          {
            "linux": {
              "x64": {
                "directory": "$linux_dir",
                "file_checksum": "$linux_checksum",
                "file_path": "$linux_dir/service.bin",
                "s3_key": "binaries/$VERSION/linux/$linux_dir.tar.gz",
                "service_path": "$linux_dir/service.bin"
              }
            },
            "win32": {
              "x64": {
                "directory": "$windows_dir",
                "file_checksum": "$windows_checksum",
                "file_path": "$windows_dir/service.exe",
                "s3_key": "binaries/$VERSION/windows/$windows_dir.tar.gz",
                "service_path": "$windows_dir/service.exe"
              }
            }
          }
          EOF

      - name: Upload Manifest JSON
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: binaries-manifest.json
          path: binaries-manifest.json
