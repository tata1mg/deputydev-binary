name: Build DeputyDev Linux & Windows Binaries

on:
  release:
    types: [published, prereleased]

jobs:
  build-cross:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        arch: [x86_64]

    permissions:
      contents: read

    steps:
      # 1 ▸ Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2 ▸ Extract version from the tag (strip leading “v”)
      - name: Determine version
        id: get_version
        shell: bash
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      # 3 ▸ Install Python 3.11
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 4 ▸ Write the SSH deploy key from repo secret
      - name: Write deploy key
        shell: bash
        run: |
          echo "${{ secrets.DEPUTYDEV_CORE_ACCESS_KEY }}" > /tmp/deputydev_core_deploy
          chmod 600 /tmp/deputydev_core_deploy

      # 5 ▸ Trust github.com host key
      - name: Add github.com to known_hosts
        shell: bash
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      # 6 ▸ Build .venv and install deps with uv
      - name: Build virtualenv and install deps
        shell: bash
        env:
          GIT_SSH_COMMAND: "ssh -i /tmp/deputydev_core_deploy -o IdentitiesOnly=yes"
        run: |
          python -m pip install --upgrade pip
          pip install uv

          uv venv .venv

          # choose correct activation script per OS
          if [ "$RUNNER_OS" = "Windows" ]; then
            ACTIVATE=".venv/Scripts/activate"
          else
            ACTIVATE=".venv/bin/activate"
          fi
          source "$ACTIVATE"

          # install runtime & binarization extras (pulls Nuitka)
          uv sync --extra binarization

          # quick sanity-check
          python - <<'PY'
          import tree_sitter_languages, pathlib, sys
          print("tree_sitter_languages ->", pathlib.Path(tree_sitter_languages.__file__).parent)
          PY

      # 6.5 ▸ Pre-install ccache (OS-specific)
      - name: Install ccache on Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache

      - name: Install ccache on Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install -y ccache

      # 7 ▸ Build standalone executable with Nuitka (OS-specific)
      - name: Build Linux binary
        if: runner.os == 'Linux'
        shell: bash
        env:
          GIT_SSH_COMMAND: "ssh -i /tmp/deputydev_core_deploy -o IdentitiesOnly=yes"
          NUITKA_CCACHE_AUTO_INSTALL: "yes"
        run: |
          set -e
          source .venv/bin/activate

          VERSION="${{ steps.get_version.outputs.version }}"
          ARCH="x86_64"

          LIB_PATH=$(python - <<'PY'
          import tree_sitter_languages, pathlib
          print(pathlib.Path(tree_sitter_languages.__file__).with_name("languages.so"))
          PY
          )

          nuitka --mode=app \
            --include-data-files="$LIB_PATH=tree_sitter_languages/$(basename "$LIB_PATH")" \
            app/service.py

          mkdir -p output
          mv service.bin "output/linux-${ARCH}-${VERSION}.bin"

      - name: Build Windows EXE
        if: runner.os == 'Windows'
        shell: bash
        env:
          GIT_SSH_COMMAND: "ssh -i /tmp/deputydev_core_deploy -o IdentitiesOnly=yes"
          NUITKA_CCACHE_AUTO_INSTALL: "yes"
        run: |
          set -e
          source .venv/Scripts/activate

          VERSION="${{ steps.get_version.outputs.version }}"
          ARCH="x86_64"

          LIB_PATH=$(python - <<'PY'
          import tree_sitter_languages, pathlib
          print(pathlib.Path(tree_sitter_languages.__file__).with_name("languages.dll"))
          PY
          )

          python -m nuitka --mode=app \
            --include-data-files="$LIB_PATH=tree_sitter_languages/$(basename "$LIB_PATH")" \
            app/service.py

          mkdir -p output
          mv service.exe "output/windows-${ARCH}-${VERSION}.exe"

      # 8 ▸ Upload the resulting artifact (OS-specific)
      - name: Upload Linux artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: deputydev-linux-${{ matrix.arch }}-${{ steps.get_version.outputs.version }}
          path: output/linux-${{ matrix.arch }}-${{ steps.get_version.outputs.version }}.bin

      - name: Upload Windows artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: deputydev-windows-${{ matrix.arch }}-${{ steps.get_version.outputs.version }}
          path: output/windows-${{ matrix.arch }}-${{ steps.get_version.outputs.version }}.exe
