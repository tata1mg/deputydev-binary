name: Build DeputyDev Linux Binary

on:
  release:
    types: [published]

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: get_version
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Write deploy key
        run: |
          echo "${{ secrets.DEPUTYDEV_CORE_ACCESS_KEY }}" > /tmp/deputydev_core_deploy
          chmod 600 /tmp/deputydev_core_deploy

      - name: Add github.com to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Build virtualenv and install deps
        env:
          GIT_SSH_COMMAND: "ssh -i /tmp/deputydev_core_deploy -o IdentitiesOnly=yes"
        run: |
          python -m pip install --upgrade pip
          pip install uv

          uv venv .venv
          source .venv/bin/activate
          uv sync --extra binarization

      - name: Install ccache
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache

      - name: Build Linux binary
        env:
          GIT_SSH_COMMAND: "ssh -i /tmp/deputydev_core_deploy -o IdentitiesOnly=yes"
          NUITKA_CCACHE_AUTO_INSTALL: "yes"
        run: |
          set -e
          source .venv/bin/activate

          VERSION="${{ steps.get_version.outputs.version }}"
          DIR="linux-x64-${VERSION}"
          mkdir -p $DIR

          python -m nuitka --mode=app --show-modules --jobs=2 --show-scons	--show-progress	 \
            --include-package=tree_sitter_language_pack.bindings.dockerfile \
            --include-package=tree_sitter_language_pack.bindings.make \
            --include-package=tree_sitter_language_pack.bindings.cmake \
            --include-package=tree_sitter_language_pack.bindings.python \
            --include-package=tree_sitter_language_pack.bindings.javascript \
            --include-package=tree_sitter_language_pack.bindings.typescript \
            --include-package=tree_sitter_language_pack.bindings.java \
            --include-package=tree_sitter_language_pack.bindings.c \
            --include-package=tree_sitter_language_pack.bindings.cpp \
            --include-package=tree_sitter_language_pack.bindings.go \
            --include-package=tree_sitter_language_pack.bindings.rust \
            --include-package=tree_sitter_language_pack.bindings.ruby \
            --include-package=tree_sitter_language_pack.bindings.html \
            --include-package=tree_sitter_language_pack.bindings.kotlin \
            --include-package=tree_sitter_language_pack.bindings.json \
            --include-package=tree_sitter_language_pack.bindings.tsx \
            app/service.py

          mv service.bin "$DIR/service.bin"

          CHECKSUM=$(sha256sum "$DIR/service.bin" | awk '{print $1}')
          echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
          echo "dir=$DIR" >> $GITHUB_OUTPUT

          tar -czf "$DIR.tar.gz" -C "$DIR" service.bin
        id: linux_build

      - name: Upload Linux tarball
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.linux_build.outputs.dir }}.tar.gz
          path: ${{ steps.linux_build.outputs.dir }}.tar.gz

      - name: Create manifest
        run: |
          cat > binaries-manifest.json <<EOF
          {
            "linux": {
              "x64": {
                "directory": "${{ steps.linux_build.outputs.dir }}",
                "file_checksum": "${{ steps.linux_build.outputs.checksum }}",
                "file_path": "${{ steps.linux_build.outputs.dir }}/service.bin",
                "s3_key": "binaries/${{ steps.get_version.outputs.version }}/linux/${{ steps.linux_build.outputs.dir }}.tar.gz",
                "service_path": "${{ steps.linux_build.outputs.dir }}/service.bin"
              }
            }
          }
          EOF

      - name: Upload Linux manifest
        uses: actions/upload-artifact@v4
        with:
          name: binaries-manifest-linux.json
          path: binaries-manifest.json